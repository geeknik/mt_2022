// TODO - this script has to: stop page loading, handle mode
// send scripts to background.js

function stopLoadingPage() {
    window.stop();
}

function showLoading() {
    document.documentElement.innerHTML = 'Reloading Page...';
}

function processPage(scriptUrl, mode) {
    console.log('in process page');
    var xhr = new XMLHttpRequest();

    xhr.open('GET', window.location.href, true);

    xhr.onerror = function () {
        document.documentElement.innerHTML = 'Error getting Page';
    }

    xhr.onload = function () {
        const page = document.implementation.createHTMLDocument("");
        page.documentElement.innerHTML = this.responseText;

        const newPage = document.importNode(page.documentElement, true);

        const nodeList = newPage.querySelectorAll('script');
        for (let i = 0; i < nodeList.length; ++i) {
            const node = nodeList[i];
            if (node.src) {
                node.setAttribute('original-src', node.src);
            }
        }

        document.replaceChild(newPage, document.documentElement);
        delete page;

        const s = document.createElement('script');
        s.src = chrome.runtime.getURL(scriptUrl);
        s.setAttribute('ignore', 'true');
        s.setAttribute('mode', mode);

        (document.documentElement).appendChild(s);
    };

    xhr.send();

}

function analyze() {
    const s = document.createElement('script');
    s.src = chrome.runtime.getURL('scripts/analyze.js');
    s.setAttribute('ignore', 'true');
    s.setAttribute('mode', 'analyze');
    (document.documentElement).appendChild(s);
}

function analyzeAndBlock() {
    stopLoadingPage();
    showLoading();
    processPage('scripts/analyze.js', 'block');
}

function analyzeAndRepair() {
    stopLoadingPage();
    showLoading();
    processPage('scripts/analyze.js', 'repair');
}


chrome.storage.sync.get('js_vulnerability_detector__mode', function (data) {
    var mode = 'repair';

    mode = data.js_vulnerability_detector__mode;
    switch (mode) {
        case 'disabled':
            break;
        case 'analyze':
            analyze();
            break;
        case 'block':
            analyzeAndBlock();
            break;
        case 'repair':
            analyzeAndRepair();
            break;
        default:
            break;
    }
});