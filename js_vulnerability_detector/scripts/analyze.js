// this script has just to evaluate result

analyze = function () {
  processScript = function (scriptUrl) {
    const xhr = new XMLHttpRequest();

    xhr.open('GET', scriptUrl, true);

    xhr.onerror = function () {
      console.log('error getting script');
    }

    xhr.onload = function () {
      console.log('analyzing');
    }

    xhr.send();
  }

  processInlineScript = function (inlineScript) {
    console.log('analyzing');
  }

  const nodeList = document.querySelectorAll('script');
  console.log(nodeList);

  const badge = new Badge();

  for (let i = 0; i < nodeList.length; ++i) {
    const node = nodeList[i];
    const src = node.getAttribute('src');
    const ignore = node.getAttribute('ignore');

    if (ignore == 'true') {
      continue;
    }

    if (src) {
      processScript(src);
    } else {
      processInlineScript(node.innerHTML);
    }

    badge.increment();
  }

  if (Badge.count != 0) {
    badge.show();
  }
}

analyzeAndBlock = function () {
  processScript = function (scriptUrl) {
    const xhr = new XMLHttpRequest();

    xhr.open('GET', scriptUrl, true);

    xhr.onerror = function () {
      console.log('error getting script');
    }

    xhr.onload = function () {
      processInlineScript(this.responseText);
    }

    xhr.send();
  }

  processInlineScript = function (inlineScript) {
    console.log('analyzing and blocking');
    // TODO - only eval those that pass
    // eval(this.responseText);
  }

  console.log('hello, I am a predefined inline script - analyze and block');

  const nodeList = document.querySelectorAll('script');
  console.log(nodeList);

  const badge = new Badge();

  for (let i = 0; i < nodeList.length; ++i) {
    const node = nodeList[i];
    const src = node.getAttribute('original-src');
    const ignore = node.getAttribute('ignore');

    if (ignore == 'true') {
      continue;
    }

    console.log(src);

    if (src) {
      processScript(src);
    } else {
      processInlineScript(node.innerHTML);
    }

    badge.increment();

  }

  if (Badge.count != 0) {
    badge.show();
  }
}

analyzeAndRepair = function () {
  processScript = function (scriptUrl) {
    const xhr = new XMLHttpRequest();

    xhr.open('GET', scriptUrl, true);

    xhr.onerror = function () {
      console.log('error getting script');
    }

    xhr.onload = function () {
      processInlineScript(this.responseText);
    }

    xhr.send();
  }

  processInlineScript = function (inlineScript) {
    // TODO - repair before eval
    console.log('analyzing and repairing');

    eval(this.responseText);
  }

  console.log('hello, I am a predefined inline script - analyze and repair');


  const nodeList = document.querySelectorAll('script');
  const badge = new Badge();

  for (let i = 0; i < nodeList.length; ++i) {
    const node = nodeList[i];
    const src = node.getAttribute('original-src');
    const ignore = node.getAttribute('ignore');

    if (ignore == 'true') {
      continue;
    }

    console.log(src);

    if (src) {
      processScript(src);
    } else {
      processInlineScript(node.innerHTML);
    }

    badge.increment();

  }

  if (Badge.count != 0) {
    badge.show();
  }
}

// browser.runtime.sendMessage({ count: 5 }, function (response) {});

const mode = document.currentScript.getAttribute('mode');

switch (mode) {
  case 'analyze':
    analyze();
    break;
  case 'block':
    analyzeAndBlock();
    break;
  case 'repair':
    analyzeAndRepair();
    break;
  default:
    break;
}
