// helper script to show AST in format needed by finder.js

const finder = require("../js-to-ast/src/finder");
const fs = require("fs");

const args = process.argv.slice(2)

const inputAst = finder.tryParse(args[0]);
const patchAst = finder.tryParse(args[1]);

const title = args[2];
const description = args[3];
const severity = args[4];
const referenceUrl = args[5];

if (finder.deepEqual(inputAst, patchAst)) { return; }

var found;

let patchJson = fs.readFileSync("../js-to-ast/src/generated_patches.json", "utf-8");

let patches = JSON.parse(patchJson);

var inputAstHash = finder.hash.MD5(JSON.stringify(inputAst, (k, v) => (k === 'start' || k === 'end' || k === 'sourceType') ? undefined : v));
var patchAstHash = finder.hash.MD5(patchAst);

patches.some((patch) => {
    if (patch.id == patchAstHash) {
        found = patch;
        return true;
    }
});

if (!found) {
    patches.push({ id: patchAstHash, patch: patchAst, });
    patchJson = JSON.stringify(patches, (k, v) => (k === 'start' || k === 'end' || k === 'sourceType') ? undefined : v);

    fs.writeFileSync("../js-to-ast/src/generated_patches.json", patchJson, "utf-8");
}

vulnJson = JSON.stringify({
    "title": title,
    "description": description,
    "reference_url": referenceUrl,
    "severity": parseInt(severity),
    "ast": inputAstHash,
    "patch": found ? found.id : patchAstHash,
});

fs.appendFileSync("../js-to-ast/src/generated_vulnerabilities.json", vulnJson + '\n,', "utf-8");
