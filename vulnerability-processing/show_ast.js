/**
 *
 * @summary helper script to show AST in format needed by finder.js
 * @author Vojtěch Randýsek, xrandy00@vutbr.cz
 *
 * Created at     : 2022-05-06 22:21:45 
 * Last modified  : 2022-05-07 11:08:58
 */

const finder = require("../js-to-ast/src/finder");
const fs = require("fs");

const args = process.argv.slice(2)

// load scripts in memory
let inputScript = fs.readFileSync(args[0], "utf-8");
let patchScript = fs.readFileSync(args[1], "utf-8");

// get normalized ASTs
const inputAst = finder.tryParse(inputScript);
const patchAst = finder.tryParse(patchScript);

const title = args[2];
const description = args[3];
const severity = args[4];
const referenceUrl = args[5];

// compare input and patch - was the file really changed in the commit?
// if the files are the same, no vulnerability was fixed there
if (finder.deepEqual(inputAst, patchAst)) { process.exit(0); }

// load already created vulnerabilities, patches and metadata
let inputs = JSON.parse(fs.readFileSync("../js-to-ast/src/generated_vulnerabilities.json", "utf-8"));
let meta = JSON.parse(fs.readFileSync("../js-to-ast/src/generated_vulnerabilities_meta.json", "utf-8"));
let patches = JSON.parse(fs.readFileSync("../js-to-ast/src/generated_patches.json", "utf-8"));

// stringify, remove unused properties and compute hashes
let inputAstHash = finder.crypto.SHA1(JSON.stringify(inputAst, (k, v) => (k === 'start' || k === 'end' || k === 'sourceType') ? undefined : v)).toString();
let patchAstHash = finder.crypto.SHA1(JSON.stringify(patchAst, (k, v) => (k === 'start' || k === 'end' || k === 'sourceType') ? undefined : v)).toString();
let vulnerabilityId = finder.crypto.SHA1(title + description + referenceUrl + severity).toString(); // doesnt really matter, just something unique

// do not duplicitly store patches - some vulnerabilities may have the same patch (for example all old versions of jQuery should be updated to latest version)
// this saves space
if (!patches[patchAstHash]) {
    patches[patchAstHash] = patchAst;
    // stringify and "sanitize"the AST befor storing it
    patchJson = JSON.stringify(patches, (k, v) => (k === 'start' || k === 'end' || k === 'sourceType') ? undefined : v);

    fs.writeFileSync("../js-to-ast/src/generated_patches.json", patchJson, "utf-8");
}

// inputs is a dictionary, where keys are node types
// if the node key is not there, create it first
if (!inputs[inputAst.type]) inputs[inputAst.type] = {};

// store the vulnerability
inputs[inputAst.type][inputAstHash] = {
    "id": vulnerabilityId,
    "patch": patchAstHash,
};

// store vulnerability metadata
meta[vulnerabilityId] = {
    "id": vulnerabilityId,
    "title": title,
    "description": description,
    "reference_url": referenceUrl,
    "severity": parseInt(severity),
};

// save to files
fs.writeFileSync("../js-to-ast/src/generated_vulnerabilities.json", JSON.stringify(inputs), "utf-8");
fs.writeFileSync("../js-to-ast/src/generated_vulnerabilities_meta.json", JSON.stringify(meta), "utf-8");
