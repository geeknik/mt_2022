// helper script to show AST in format needed by finder.js

const finder = require("../js-to-ast/src/finder");
const fs = require("fs");

const args = process.argv.slice(2)

const inputAst = finder.tryParse(args[0]);
const patchAst = finder.tryParse(args[1]);

const title = args[2];
const description = args[3];
const severity = args[4];
const referenceUrl = args[5];

if (finder.deepEqual(inputAst, patchAst)) { return; }

let inputs = JSON.parse(fs.readFileSync("../js-to-ast/src/generated_vulnerabilities.json", "utf-8"));
let meta = JSON.parse(fs.readFileSync("../js-to-ast/src/generated_vulnerabilities_meta.json", "utf-8"));
let patches = JSON.parse(fs.readFileSync("../js-to-ast/src/generated_patches.json", "utf-8"));

let inputAstHash = finder.crypto.SHA1(JSON.stringify(inputAst, (k, v) => (k === 'start' || k === 'end' || k === 'sourceType') ? undefined : v)).toString();
let patchAstHash = finder.crypto.SHA1(patchAst).toString();
let vulnerabilityId = finder.crypto.SHA1(title + description + referenceUrl + severity).toString();


if (!patches[patchAstHash]) {
    patches[patchAstHash] = patchAst;
    patchJson = JSON.stringify(patches, (k, v) => (k === 'start' || k === 'end' || k === 'sourceType') ? undefined : v);

    fs.writeFileSync("../js-to-ast/src/generated_patches.json", patchJson, "utf-8");
}

if (!inputs[inputAst.type]) inputs[inputAst.type] = {};

inputs[inputAst.type][inputAstHash] = {
    "id": vulnerabilityId,
    "patch": patchAstHash,
};

meta[vulnerabilityId] = {
    "id": vulnerabilityId,
    "title": title,
    "description": description,
    "reference_url": referenceUrl,
    "severity": parseInt(severity),
};

fs.writeFileSync("../js-to-ast/src/generated_vulnerabilities.json", JSON.stringify(inputs), "utf-8");
fs.writeFileSync("../js-to-ast/src/generated_vulnerabilities_meta.json", JSON.stringify(meta), "utf-8");
