// helper script to show AST in format needed by finder.js
// 1. find commit of vulnerability
// 2. create structure of variables input, escapedInput, inputAst, patch, escapedPatch
// 3. copy code of 'before' to input, 'after' to patch
// 4. use https://www.freeformatter.com/ to fill escapedInput and escapedPatch
// 5. set showAstOnly to true, run
// 6. copy inputAst from console, remove unwanted nodes (Program, perhaps others, depends on specific case)
// 7. set showAstOnly to false
// 8. use hashes from console (in js-to-ast run.js add patches and vulnerabilities)


const finder = require("../js-to-ast/src/finder");

var showAstOnly = false;

function showAst(escapedInput) {
    var inputAst = finder.tryParse(escapedInput);
    console.log(JSON.stringify(inputAst, (k, v) => (k === 'start' || k === 'end' || k === 'sourceType') ? undefined : v));
}

function computeHashes(inputAst, escPatch) {
    let inputAstHashCrypto = finder.crypto.SHA1(JSON.stringify(inputAst, (k, v) => (k === 'start' || k === 'end' || k === 'sourceType') ? undefined : v));

    console.log('input: ' + inputAstHashCrypto.toString());

    if (escPatch) {
        let patchAst = finder.tryParse(escPatch);
        let patchAstHashCrypto = finder.crypto.SHA1(JSON.stringify(patchAst));
        console.log('patch: ' + patchAstHashCrypto.toString());
    }

    console.log('\n');
}

// https://github.com/advisories/GHSA-2pqj-h3vj-pqgw
// https://github.com/jquery/jquery/commit/f71a6ec6cfe3f748a939eaa109e92b8a9bdac6cc
// var input = `/^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/`;
// var escapedInput = `\/^(?:[^#<]*(<[\\w\\W]+>)[^>]*$|#([\\w\\-]*)$)\/`;
// var inputAst = { "type": "Literal", "value": {}, "raw": "/^(?:[^#<]*(<[\\w\\W]+>)[^>]*$|#([\\w\\-]*)$)/", "regex": { "pattern": "^(?:[^#<]*(<[\\w\\W]+>)[^>]*$|#([\\w\\-]*)$)", "flags": "" } };
// var patch = `/^(?:(<[\w\W]+>)[^>]*|#([\w-]*))$/`;
// var escapedPatch = `\/^(?:(<[\\w\\W]+>)[^>]*|#([\\w-]*))$\/`;
// showAstOnly ? showAst(escapedInput) : computeHashes(inputAst, escapedPatch);

// // https://github.com/advisories/GHSA-2pqj-h3vj-pqgw
// // https://github.com/jquery/jquery/commit/0877d424e08d57e6f0d1da9a86289fb10d0ee136
// input = `/^(?:[^#<]*(<[\w\W]+>)[^>]*$)/`;
// escapedInput = `\/^(?:[^#<]*(<[\\w\\W]+>)[^>]*$)\/`;
// inputAst = { "type": "Literal", "value": {}, "raw": "/^(?:[^#<]*(<[\\w\\W]+>)[^>]*$)/", "regex": { "pattern": "^(?:[^#<]*(<[\\w\\W]+>)[^>]*$)", "flags": "" } };
// patch = `/^(?:(<[\w\W]+>)[^>]*|#([\w-]*))$/`;
// escapedPatch = `\/^(?:(<[\\w\\W]+>)[^>]*|#([\\w-]*))$\/`;
// showAstOnly ? showAst(escapedInput) : computeHashes(inputAst, escapedPatch);

// // https://github.com/advisories/GHSA-2pqj-h3vj-pqgw
// // https://github.com/jquery/jquery/commit/05531fc4080ae24070930d15ae0cea7ae056457d
// input = `/^(?:[^#<]*(<[\w\W]+>)[^>]*|#([\w-]*))$/`;
// escapedInput = `\/^(?:[^#<]*(<[\\w\\W]+>)[^>]*|#([\\w-]*))$\/`;
// inputAst = { "type": "Literal", "value": {}, "raw": "/^(?:[^#<]*(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/", "regex": { "pattern": "^(?:[^#<]*(<[\\w\\W]+>)[^>]*|#([\\w-]*))$", "flags": "" } };
// patch = `/^(?:(<[\w\W]+>)[^>]*|#([\w-]*))$/`;
// escapedPatch = `\/^(?:(<[\\w\\W]+>)[^>]*|#([\\w-]*))$\/`
// showAstOnly ? showAst(escapedInput) : computeHashes(inputAst, escapedPatch);

// // https://github.com/advisories/GHSA-gxr4-xjj5-5px2
// input = `/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi`;
// escapedInput = `\/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\\/>\/gi`;
// inputAst = { "type": "Literal", "value": {}, "raw": "/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi", "regex": { "pattern": "<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>", "flags": "gi" } };
// showAstOnly ? showAst(escapedInput) : computeHashes(inputAst, null);


// // https://github.com/advisories/GHSA-x5rq-j2xg-h7qm
// input = `/[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/`;
// escapedInput = `\/[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]\/`;
// inputAst = { "type": "Literal", "value": {}, "raw": "/[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/", "regex": { "pattern": "[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]", "flags": "" } };
// patch = `/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/`;
// escapedPatch = `\/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]\/`
// showAstOnly ? showAst(escapedInput) : computeHashes(inputAst, escapedPatch);

// // https://github.com/advisories/GHSA-446m-mv8f-q348
// input = `/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i`;
// escapedInput = `\/[0-9]*[\'a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}\/i`;
// inputAst = { "type": "Literal", "value": {}, "raw": "/[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i", "regex": { "pattern": "[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}", "flags": "i" } };
// patch = `/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i`;
// escapedPatch = `\/[0-9]*[\'a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]{1,256}|[\\u0600-\\u06FF\\\/]{1,256}(\\s*?[\\u0600-\\u06FF]{1,256}){1,2}\/i`
// showAstOnly ? showAst(escapedInput) : computeHashes(inputAst, escapedPatch);

// // https://github.com/advisories/GHSA-6c3j-c64m-qhgq
// input = `for ( ; i < length; i++ ) {
//     // Only deal with non-null/undefined values
//     if ( ( options = arguments[ i ] ) != null ) {
//         // Extend the base object
//         for ( name in options ) {
//             copy = options[ name ];

//             // Prevent never-ending loop
//             if ( target === copy ) {
//                 continue;
//             }

//             // Recurse if we're merging plain objects or arrays
//             if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
//                 ( copyIsArray = Array.isArray( copy ) ) ) ) {
//                 src = target[ name ];
//                 // Ensure proper type for the source value
//                 if ( copyIsArray && !Array.isArray( src ) ) {
//                     clone = [];
//                 } else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
//                     clone = {};
//                 } else {
//                     clone = src;
//                 }
//                 copyIsArray = false;
//                 // Never move original objects, clone them
//                 target[ name ] = jQuery.extend( deep, clone, copy );
//             // Don't bring in undefined values
//             } else if ( copy !== undefined ) {
//                 target[ name ] = copy;
//             }
//         }
//     }
// }`;
// escapedInput = `for ( ; i < length; i++ ) {\r\n\t\t\/\/ Only deal with non-null\/undefined values\r\n\t\tif ( ( options = arguments[ i ] ) != null ) {\r\n\t\t\t\/\/ Extend the base object\r\n\t\t\tfor ( name in options ) {\r\n\t\t\t\tcopy = options[ name ];\r\n\r\n\t\t\t\t\/\/ Prevent never-ending loop\r\n\t\t\t\tif ( target === copy ) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\/\/ Recurse if we\'re merging plain objects or arrays\r\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\r\n\t\t\t\t\t( copyIsArray = Array.isArray( copy ) ) ) ) {\r\n\t\t\t\t\tsrc = target[ name ];\r\n\t\t\t\t\t\/\/ Ensure proper type for the source value\r\n\t\t\t\t\tif ( copyIsArray && !Array.isArray( src ) ) {\r\n\t\t\t\t\t\tclone = [];\r\n\t\t\t\t\t} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {\r\n\t\t\t\t\t\tclone = {};\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tclone = src;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcopyIsArray = false;\r\n\t\t\t\t\t\/\/ Never move original objects, clone them\r\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\r\n\t\t\t\t\/\/ Don\'t bring in undefined values\r\n\t\t\t\t} else if ( copy !== undefined ) {\r\n\t\t\t\t\ttarget[ name ] = copy;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}`;
// inputAst = { "type": "ForStatement", "init": null, "test": { "type": "BinaryExpression", "left": { "type": "Identifier", "name": "i" }, "operator": "<", "right": { "type": "Identifier", "name": "length" } }, "update": { "type": "UpdateExpression", "operator": "++", "prefix": false, "argument": { "type": "Identifier", "name": "i" } }, "body": { "type": "BlockStatement", "body": [{ "type": "IfStatement", "test": { "type": "BinaryExpression", "left": { "type": "AssignmentExpression", "operator": "=", "left": { "type": "Identifier", "name": "options" }, "right": { "type": "MemberExpression", "object": { "type": "Identifier", "name": "arguments" }, "property": { "type": "Identifier", "name": "i" }, "computed": true, "optional": false } }, "operator": "!=", "right": { "type": "Literal", "value": null, "raw": "null" } }, "consequent": { "type": "BlockStatement", "body": [{ "type": "ForInStatement", "left": { "type": "Identifier", "name": "name" }, "right": { "type": "Identifier", "name": "options" }, "body": { "type": "BlockStatement", "body": [{ "type": "ExpressionStatement", "expression": { "type": "AssignmentExpression", "operator": "=", "left": { "type": "Identifier", "name": "copy" }, "right": { "type": "MemberExpression", "object": { "type": "Identifier", "name": "options" }, "property": { "type": "Identifier", "name": "name" }, "computed": true, "optional": false } } }, { "type": "IfStatement", "test": { "type": "BinaryExpression", "left": { "type": "Identifier", "name": "target" }, "operator": "===", "right": { "type": "Identifier", "name": "copy" } }, "consequent": { "type": "BlockStatement", "body": [{ "type": "ContinueStatement", "label": null }] }, "alternate": null }, { "type": "IfStatement", "test": { "type": "LogicalExpression", "left": { "type": "LogicalExpression", "left": { "type": "Identifier", "name": "deep" }, "operator": "&&", "right": { "type": "Identifier", "name": "copy" } }, "operator": "&&", "right": { "type": "LogicalExpression", "left": { "type": "CallExpression", "callee": { "type": "MemberExpression", "object": { "type": "Identifier", "name": "jQuery" }, "property": { "type": "Identifier", "name": "isPlainObject" }, "computed": false, "optional": false }, "arguments": [{ "type": "Identifier", "name": "copy" }], "optional": false }, "operator": "||", "right": { "type": "AssignmentExpression", "operator": "=", "left": { "type": "Identifier", "name": "copyIsArray" }, "right": { "type": "CallExpression", "callee": { "type": "MemberExpression", "object": { "type": "Identifier", "name": "Array" }, "property": { "type": "Identifier", "name": "isArray" }, "computed": false, "optional": false }, "arguments": [{ "type": "Identifier", "name": "copy" }], "optional": false } } } }, "consequent": { "type": "BlockStatement", "body": [{ "type": "ExpressionStatement", "expression": { "type": "AssignmentExpression", "operator": "=", "left": { "type": "Identifier", "name": "src" }, "right": { "type": "MemberExpression", "object": { "type": "Identifier", "name": "target" }, "property": { "type": "Identifier", "name": "name" }, "computed": true, "optional": false } } }, { "type": "IfStatement", "test": { "type": "LogicalExpression", "left": { "type": "Identifier", "name": "copyIsArray" }, "operator": "&&", "right": { "type": "UnaryExpression", "operator": "!", "prefix": true, "argument": { "type": "CallExpression", "callee": { "type": "MemberExpression", "object": { "type": "Identifier", "name": "Array" }, "property": { "type": "Identifier", "name": "isArray" }, "computed": false, "optional": false }, "arguments": [{ "type": "Identifier", "name": "src" }], "optional": false } } }, "consequent": { "type": "BlockStatement", "body": [{ "type": "ExpressionStatement", "expression": { "type": "AssignmentExpression", "operator": "=", "left": { "type": "Identifier", "name": "clone" }, "right": { "type": "ArrayExpression", "elements": [] } } }] }, "alternate": { "type": "IfStatement", "test": { "type": "LogicalExpression", "left": { "type": "UnaryExpression", "operator": "!", "prefix": true, "argument": { "type": "Identifier", "name": "copyIsArray" } }, "operator": "&&", "right": { "type": "UnaryExpression", "operator": "!", "prefix": true, "argument": { "type": "CallExpression", "callee": { "type": "MemberExpression", "object": { "type": "Identifier", "name": "jQuery" }, "property": { "type": "Identifier", "name": "isPlainObject" }, "computed": false, "optional": false }, "arguments": [{ "type": "Identifier", "name": "src" }], "optional": false } } }, "consequent": { "type": "BlockStatement", "body": [{ "type": "ExpressionStatement", "expression": { "type": "AssignmentExpression", "operator": "=", "left": { "type": "Identifier", "name": "clone" }, "right": { "type": "ObjectExpression", "properties": [] } } }] }, "alternate": { "type": "BlockStatement", "body": [{ "type": "ExpressionStatement", "expression": { "type": "AssignmentExpression", "operator": "=", "left": { "type": "Identifier", "name": "clone" }, "right": { "type": "Identifier", "name": "src" } } }] } } }, { "type": "ExpressionStatement", "expression": { "type": "AssignmentExpression", "operator": "=", "left": { "type": "Identifier", "name": "copyIsArray" }, "right": { "type": "Literal", "value": false, "raw": "false" } } }, { "type": "ExpressionStatement", "expression": { "type": "AssignmentExpression", "operator": "=", "left": { "type": "MemberExpression", "object": { "type": "Identifier", "name": "target" }, "property": { "type": "Identifier", "name": "name" }, "computed": true, "optional": false }, "right": { "type": "CallExpression", "callee": { "type": "MemberExpression", "object": { "type": "Identifier", "name": "jQuery" }, "property": { "type": "Identifier", "name": "extend" }, "computed": false, "optional": false }, "arguments": [{ "type": "Identifier", "name": "deep" }, { "type": "Identifier", "name": "clone" }, { "type": "Identifier", "name": "copy" }], "optional": false } } }] }, "alternate": { "type": "IfStatement", "test": { "type": "BinaryExpression", "left": { "type": "Identifier", "name": "copy" }, "operator": "!==", "right": { "type": "Identifier", "name": "undefined" } }, "consequent": { "type": "BlockStatement", "body": [{ "type": "ExpressionStatement", "expression": { "type": "AssignmentExpression", "operator": "=", "left": { "type": "MemberExpression", "object": { "type": "Identifier", "name": "target" }, "property": { "type": "Identifier", "name": "name" }, "computed": true, "optional": false }, "right": { "type": "Identifier", "name": "copy" } } }] }, "alternate": null } }] } }] }, "alternate": null }] } };
// patch = `for ( ; i < length; i++ ) {
//     // Only deal with non-null/undefined values
//     if ( ( options = arguments[ i ] ) != null ) {
//         // Extend the base object
//         for ( name in options ) {
//             copy = options[ name ];

//             // Prevent Object.prototype pollution
//             // Prevent never-ending loop
//             if ( name === "__proto__" || target === copy ) {
//                 continue;
//             }

//             // Recurse if we're merging plain objects or arrays
//             if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
//                 ( copyIsArray = Array.isArray( copy ) ) ) ) {
//                 src = target[ name ];
//                 // Ensure proper type for the source value
//                 if ( copyIsArray && !Array.isArray( src ) ) {
//                     clone = [];
//                 } else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
//                     clone = {};
//                 } else {
//                     clone = src;
//                 }
//                 copyIsArray = false;
//                 // Never move original objects, clone them
//                 target[ name ] = jQuery.extend( deep, clone, copy );
//             // Don't bring in undefined values
//             } else if ( copy !== undefined ) {
//                 target[ name ] = copy;
//             }
//         }
//     }
// }`;
// escapedPatch = `for ( ; i < length; i++ ) {\r\n\t\t\/\/ Only deal with non-null\/undefined values\r\n\t\tif ( ( options = arguments[ i ] ) != null ) {\r\n\t\t\t\/\/ Extend the base object\r\n\t\t\tfor ( name in options ) {\r\n\t\t\t\tcopy = options[ name ];\r\n\r\n\t\t\t\t\/\/ Prevent Object.prototype pollution\r\n\t\t\t\t\/\/ Prevent never-ending loop\r\n\t\t\t\tif ( name === \"__proto__\" || target === copy ) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\/\/ Recurse if we\'re merging plain objects or arrays\r\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\r\n\t\t\t\t\t( copyIsArray = Array.isArray( copy ) ) ) ) {\r\n\t\t\t\t\tsrc = target[ name ];\r\n\t\t\t\t\t\/\/ Ensure proper type for the source value\r\n\t\t\t\t\tif ( copyIsArray && !Array.isArray( src ) ) {\r\n\t\t\t\t\t\tclone = [];\r\n\t\t\t\t\t} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {\r\n\t\t\t\t\t\tclone = {};\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tclone = src;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcopyIsArray = false;\r\n\t\t\t\t\t\/\/ Never move original objects, clone them\r\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\r\n\t\t\t\t\/\/ Don\'t bring in undefined values\r\n\t\t\t\t} else if ( copy !== undefined ) {\r\n\t\t\t\t\ttarget[ name ] = copy;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}`;
// showAstOnly ? showAst(escapedInput) : computeHashes(inputAst, escapedPatch);



///////////
/// NPM ///
///////////

//https://github.com/remarkjs/remark-html/commit/b75c9dde582ad87ba498e369c033dc8a350478c1  "Unsafe defaults in remark-html" "The documentation of remark-html has mentioned that it was safe by default. In practise the default was never safe and had to be opted into. This means arbitrary HTML can be passed through leading to potential XSS attacks." 1 "https://github.com/advisories/GHSA-9q5w-79cv-947m") 
var input = ``;
var escapedInput = ``;
var inputAst = {};
showAstOnly ? showAst(escapedInput) : computeHashes(inputAst, escapedPatch);

// https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c    "Command Injection in lodash" "lodash versions prior to 4.17.21 are vulnerable to Command Injection via the template function." 2 "https://github.com/advisories/GHSA-35jh-r3h4-6jhm") 
input = ``;
escapedInput = ``;
inputAst = {};
showAstOnly ? showAst(escapedInput) : computeHashes(inputAst, escapedPatch);

//https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12    "Prototype Pollution in lodash" "Versions of lodash prior to 4.17.19 are vulnerable to Prototype Pollution. The function zipObjectDeep allows a malicious user to modify the prototype of Object if the property identifiers are user-supplied." 2 "https://github.com/advisories/GHSA-p6mc-m468-83gw") 
input = ``;
escapedInput = ``;
inputAst = {};
showAstOnly ? showAst(escapedInput) : computeHashes(inputAst, escapedPatch);

//https://github.com/request/request/commit/3d31d4526fa4d4e4f59b89cabe194fb671063cdb    "Remote Memory Exposure in request" "Affected versions of request will disclose local system memory to remote systems in certain circumstances. When a multipart request is made, and the type of body is number, then a buffer of that size will be allocated and sent to the remote server as the body." 3 "https://github.com/advisories/GHSA-7xfp-9c55-5vqj") 
input = ``;
escapedInput = ``;
inputAst = {};
showAstOnly ? showAst(escapedInput) : computeHashes(inputAst, escapedPatch);

// https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66             "Arbitrary Code Execution in underscore" "The package underscore from 1.13.0-0 and before 1.13.0-2, from 1.3.2 and before 1.12.1 are vulnerable to Arbitrary Code Execution via the template function, particularly when a variable property is passed as an argument as it is not sanitized." 2 "https://github.com/advisories/GHSA-cf4h-3jhx-xvhq") 
input = ``;
escapedInput = ``;
inputAst = {};
showAstOnly ? showAst(escapedInput) : computeHashes(inputAst, escapedPatch);

//https://github.com/axios/axios/commit/c7329fefc890050edd51e40e469a154d0117fc55                  "Server-Side Request Forgery in Axios" "Axios NPM package 0.21.0 contains a Server-Side Request Forgery (SSRF) vulnerability where an attacker is able to bypass a proxy by providing a URL that responds with a redirect to a restricted host or IP address." 2 "https://github.com/advisories/GHSA-4w2v-q235-vp99") 
input = ``;
escapedInput = ``;
inputAst = {};
showAstOnly ? showAst(escapedInput) : computeHashes(inputAst, escapedPatch);

// https://github.com/axios/axios/commit/5b457116e31db0e88fede6c428e969e87f290929              "Incorrect Comparison in axios" "axios is vulnerable to Inefficient Regular Expression Complexity" 2 "https://github.com/advisories/GHSA-cph5-m8f7-6c5x") 
input = ``;
escapedInput = ``;
inputAst = {};
showAstOnly ? showAst(escapedInput) : computeHashes(inputAst, escapedPatch);

// https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab     "Prototype Pollution in minimist" "Affected versions of minimist are vulnerable to prototype pollution. Arguments are not properly sanitized, allowing an attacker to modify the prototype of Object, causing the addition or modification of an existing property that will exist on all objects." 3 "https://github.com/advisories/GHSA-vh95-rmgr-6w4m") 
input = ``;
escapedInput = ``;
inputAst = {};
showAstOnly ? showAst(escapedInput) : computeHashes(inputAst, escapedPatch);

//https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c        "Improper Privilege Management in shelljs" "shelljs is vulnerable to Improper Privilege Management" 2 "https://github.com/advisories/GHSA-4rq4-32rv-6wp6") 
input = ``;
escapedInput = ``;
inputAst = {};
patch = ``;
escapedPatch = ``
showAstOnly ? showAst(escapedInput) : computeHashes(inputAst, escapedPatch);

//https://github.com/nodeca/js-yaml/commit/a567ef3c6e61eb319f0bfc2671d91061afb01235       "Denial of Service in js-yaml" "Versions of js-yaml prior to 3.13.0 are vulnerable to Denial of Service. By parsing a carefully-crafted YAML file, the node process stalls and may exhaust system resources leading to a Denial of Service." 3 "https://github.com/advisories/GHSA-2pr6-76vf-7546") 
input = ``;
escapedInput = ``;
inputAst = {};
showAstOnly ? showAst(escapedInput) : computeHashes(inputAst, escapedPatch);

// https://github.com/nodeca/js-yaml/commit/e18afbf1edcafb7add2c4c7b22abc8d6ebc2fa61        "Code Injection in js-yaml" "Versions of js-yaml prior to 3.13.1 are vulnerable to Code Injection. The load() function may execute arbitrary code injected through a malicious YAML file. Objects that have toString as key, JavaScript code as value and are used as explicit mapping keys allow attackers to execute the supplied code through the load() function. The safeLoad() function is unaffected." 2 "https://github.com/advisories/GHSA-8j8c-7jfh-h6hx") 
input = ``;
escapedInput = ``;
inputAst = {};
showAstOnly ? showAst(escapedInput) : computeHashes(inputAst, escapedPatch);

//https://github.com/handlebars-lang/handlebars.js/commit/8d5530ee2c3ea9f0aee3fde310b9f36887d00b8b                        "Regular Expression Denial of Service in Handlebars" "Handlebars before 4.4.5 allows Regular Expression Denial of Service (ReDoS) because of eager matching. The parser may be forced into an endless loop while processing crafted templates. This may allow attackers to exhaust system resources." 2 "https://github.com/advisories/GHSA-62gr-4qp9-h98f") 
input = ``;
escapedInput = ``;
inputAst = {};
showAstOnly ? showAst(escapedInput) : computeHashes(inputAst, escapedPatch);

// https://github.com/handlebars-lang/handlebars.js/commit/d54137810a49939fd2ad01a91a34e182ece4528e                        "Arbitrary Code Execution in Handlebars" "Handlebars before 3.0.8 and 4.x before 4.5.3 is vulnerable to Arbitrary Code Execution. The lookup helper fails to properly validate templates, allowing attackers to submit templates that execute arbitrary JavaScript." 2 "https://github.com/advisories/GHSA-3cqr-58rm-57f8") 
input = ``;
escapedInput = ``;
inputAst = {};
showAstOnly ? showAst(escapedInput) : computeHashes(inputAst, escapedPatch);

// https://github.com/handlebars-lang/handlebars.js/commit/b6d3de7123eebba603e321f04afdbae608e8fea8                    "Remote code execution in handlebars when compiling templates" "The package handlebars before 4.7.7 are vulnerable to Remote Code Execution (RCE) when selecting certain compiling options to compile templates coming from an untrusted source." 1 "https://github.com/advisories/GHSA-f2jv-r9rf-7988") 
input = ``;
escapedInput = ``;
inputAst = {};
showAstOnly ? showAst(escapedInput) : computeHashes(inputAst, escapedPatch);

// https://github.com/handlebars-lang/handlebars.js/commit/f0589701698268578199be25285b2ebea1c1e427                    "Remote code execution in handlebars when compiling templates" "The package handlebars before 4.7.7 are vulnerable to Remote Code Execution (RCE) when selecting certain compiling options to compile templates coming from an untrusted source." 1 "https://github.com/advisories/GHSA-f2jv-r9rf-7988") 
input = ``;
escapedInput = ``;
inputAst = {};
showAstOnly ? showAst(escapedInput) : computeHashes(inputAst, escapedPatch);

// https://github.com/handlebars-lang/handlebars.js/commit/2078c727c627f25d4a149962f05c1e069beb18bc                        "Prototype Pollution in handlebars" "Versions of handlebars prior to 3.0.8 or 4.3.0 are vulnerable to Prototype Pollution leading to Remote Code Execution. Templates may alter an Objects' __proto__ and __defineGetter__ properties, which may allow an attacker to execute arbitrary code through crafted payloads." 1 "https://github.com/advisories/GHSA-w457-6q6x-cgp9") 
input = ``;
escapedInput = ``;
inputAst = {};
showAstOnly ? showAst(escapedInput) : computeHashes(inputAst, escapedPatch);

// https://github.com/socketio/socket.io/commit/f78a575f66ab693c3ea96ea88429ddb1a44c86c7             "Insecure defaults due to CORS misconfiguration in socket.io" "The package socket.io before 2.4.0 are vulnerable to Insecure Defaults due to CORS Misconfiguration. All domains are whitelisted by default." 3 "https://github.com/advisories/GHSA-fxwf-4rqh-v8g3") 
input = ``;
escapedInput = ``;
inputAst = {};
showAstOnly ? showAst(escapedInput) : computeHashes(inputAst, escapedPatch);

// https://github.com/socketio/socket.io/commit/67b4eb9abdf111dfa9be4176d1709374a2b4ded8        "Insecure randomness in socket.io" "Affected versions of socket.io depend on Math.random() to create socket IDs, and therefore the IDs are predictable. With enough information on prior IDs, an attacker may be able to guess the socket ID and gain access to socket.io servers without authorization." 1 "https://github.com/advisories/GHSA-qv2v-m59f-v5fw") 
input = ``;
escapedInput = ``;
inputAst = {};
showAstOnly ? showAst(escapedInput) : computeHashes(inputAst, escapedPatch);

// https://github.com/websockets/ws/commit/00c425ec77993773d823f018f64a5c44e17023ff                "ReDoS in Sec-Websocket-Protocol header" "A specially crafted value of the Sec-Websocket-Protocol header can be used to significantly slow down a ws server." 3 "https://github.com/advisories/GHSA-6fc8-4gx4-v693") 
input = ``;
escapedInput = ``;
inputAst = {};
showAstOnly ? showAst(escapedInput) : computeHashes(inputAst, escapedPatch);

// https://github.com/websockets/ws/commit/c4fe46608acd61fbf7397eadc47378903f95b78a                "Denial of Service in ws" "Affected versions of ws can crash when a specially crafted Sec-WebSocket-Extensions header containing Object.prototype property names as extension or parameter names is sent." 2 "https://github.com/advisories/GHSA-5v72-xg48-5rpm") 
input = ``;
escapedInput = ``;
inputAst = {};
showAstOnly ? showAst(escapedInput) : computeHashes(inputAst, escapedPatch);

// https://github.com/sass/node-sass/commit/338fd7a14d3b8bd374a382336df16f9c6792b884             "Denial of Service in node-sass" "Affected versions of node-sass are vulnerable to Denial of Service (DoS). Crafted objects passed to the renderSync function may trigger C++ assertions in CustomImporterBridge::get_importer_entry and CustomImporterBridge::post_process_return_value that crash the Node process. This may allow attackers to crash the system's running Node process and lead to Denial of Service." 3 "https://github.com/advisories/GHSA-9v62-24cr-58cx") 
input = ``;
escapedInput = ``;
inputAst = {};
showAstOnly ? showAst(escapedInput) : computeHashes(inputAst, escapedPatch);

// https://github.com/Automattic/mongoose/commit/f3eca5b94d822225c04e96cbeed9f095afb3c31c             "Improper Input Validation in Automattic Mongoose" "Automattic Mongoose through 5.7.4 allows attackers to bypass access control (in some applications) because any query object with a _bsontype attribute is ignored. For example, adding \"_bsontype\":\"a\" can sometimes interfere with a query filter." 1 "https://github.com/advisories/GHSA-8687-vv9j-hgph") 
input = ``;
escapedInput = ``;
inputAst = {};
showAstOnly ? showAst(escapedInput) : computeHashes(inputAst, escapedPatch);

//https://github.com/redis/node-redis/commit/2d11b6dc9b9774464a91fb4b448bad8bf699629e                        "Potential exponential regex in monitor mode" "When a client is in monitoring mode, the regex begin used to detected monitor messages could cause exponential backtracking on some strings. This issue could lead to a denial of service." 4 "https://github.com/advisories/GHSA-35q2-47q7-3pc3") 
input = ``;
escapedInput = ``;
inputAst = {};
showAstOnly ? showAst(escapedInput) : computeHashes(inputAst, escapedPatch);





